%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Xara X
%%For: (Unregistered user) (Unregistered company)
%%Title: (derivative.xar)
%%CreationDate: (05/08/07) (10:00 AM)
%%BoundingBox: 216 207 395 321
%%HiResBoundingBox: 216 207.307 394.374 320.129
%%AWColourTable
%%+h (Red) 0.0 100.0 100.0
%%+h (Orange-Red) 15.0 100.0 100.0
%%+h (Orange) 30.0 100.0 100.0
%%+h (Orange-Yellow) 45.0 100.0 100.0
%%+h (Yellow) 60.0 100.0 100.0
%%+h (Yellow-Chartreuse) 75.0 100.0 100.0
%%+h (Chartreuse) 90.0 100.0 100.0
%%+h (Chartreuse-Green) 105.0 100.0 100.0
%%+h (Green) 120.0 100.0 100.0
%%+h (Green-SpringGreen) 135.0 100.0 100.0
%%+h (Spring Green) 150.0 100.0 100.0
%%+h (SpringGreen-Cyan) 165.0 100.0 100.0
%%+h (Cyan) 180.0 100.0 100.0
%%+h (Sky Blue) 195.0 100.0 100.0
%%+h (Mid Blue) 210.0 100.0 100.0
%%+h (MidBlue-Blue) 225.0 100.0 100.0
%%+h (Blue) 240.0 100.0 100.0
%%+h (Blue-Indigo) 255.0 100.0 100.0
%%+h (Indigo) 270.0 100.0 100.0
%%+h (Violet) 285.0 100.0 100.0
%%+h (Magenta) 300.0 100.0 100.0
%%+h (Magenta-Crimson) 315.0 100.0 100.0
%%+h (Crimson) 330.0 100.0 100.0
%%+h (Crimson-Red) 345.0 100.0 100.0
%%+h (Black) 0.0 0.0 0.0
%%+t (90% Black) 90
%%+t (80% Black) 80
%%+t (70% Black) 70
%%+t (60% Black) 60
%%+t (50% Black) 50
%%+t (40% Black) 40
%%+t (30% Black) 30
%%+t (20% Black) 20
%%+t (10% Black) 10
%%+h (White) 0.0 0.0 100.0
%%EndComments
%%BeginProlog

%%BeginResource: procset XaraStudio1Dict
% Copyright (c) 1995,1996 Xara Ltd
/XaraStudio1Dict 300 dict def XaraStudio1Dict begin
/bd{bind def}bind def/ld{load def}bind def/xd{exch def}bind def/sv{save}bd
/rs{restore}bd/gs{gsave}bd/gr{grestore}bd/bg{begin}bd/en{end}bd/level2
/languagelevel where{pop languagelevel 2 ge}{false}ifelse def/setseps{
/v_gseps xd}bd/setplate{/v_plate xd}bd/setkgray{/v_keyg xd}bd/setmono{
/v_mono xd}bd/rgb2gray{0.109 mul exch 0.586 mul add exch 0.305 mul
add}bd/cmyk2rgb{3{dup 5 -1 roll add dup 1 gt{pop 1}if 1 exch sub exch}repeat
pop}bd/rgb2cmyk{3{1.0 exch sub 3 1 roll}repeat 3 copy 2 copy gt{exch}if
pop 2 copy gt{exch}if pop dup 0.5 gt{0.5 sub dup 3{5 1 roll dup 3 1
roll sub}repeat 5 1 roll pop}{pop 0}ifelse}bd/cmyk2hsb{3{dup 5 -1 roll
add 1 exch sub dup 0 lt{pop 0}if exch}repeat pop rgb2hsb}bd/rgb2hsb{setrgbcolor
currenthsbcolor}bd/readcurve{exch 255.0 mul 0.5 add cvi get 255.0 div}bd
/rgb2devcmyk{3 copy dup 3 1 roll eq 3 1 roll eq v_keyg 1 eq and and{pop
pop 1 exch sub 0 0 0 4 -1 roll}{/ucurve where{pop 3{1.0 exch sub 3
1 roll}repeat 3 copy 2 copy gt{exch}if pop 2 copy gt{exch}if pop dup
ucurve readcurve exch bcurve readcurve clamp01 3{5 1 roll dup 3 1 roll
sub clamp01}repeat 5 1 roll pop 4 1 roll ycurve readcurve 4 1 roll
mcurve readcurve 4 1 roll ccurve readcurve 4 1 roll}{rgb2cmyk}ifelse}ifelse}def
/rgb2keyG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop}{Max3}ifelse
1 exch sub bcurve readcurve clamp01}bd/rgb2key{Max3 1 exch sub bcurve
readcurve clamp01}bd/rgb2cyanG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop
pop pop 0}{rgb2cyan}ifelse}bd/rgb2cyan{3 copy Max3 1 exch sub ucurve
readcurve 4 1 roll pop pop 1 exch sub exch sub ccurve readcurve clamp01}bd
/rgb2magentaG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2magenta}ifelse}bd
/rgb2magenta{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll pop
1 exch sub 3 1 roll pop sub mcurve readcurve clamp01}bd/rgb2yellowG{3
copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2yellow}ifelse}bd
/rgb2yellow{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll 1 exch
sub 4 1 roll pop pop sub ycurve readcurve clamp01}bd/rgb2plategray{v_keyg
0 eq v_plate v_cpky eq{{rgb2key}{rgb2keyG}ifelse}{v_plate v_cpyl eq{{rgb2yellow}{rgb2yellowG}ifelse}{v_plate
v_cpmg eq{{rgb2magenta}{rgb2magentaG}ifelse}{v_plate v_cpcy eq{{rgb2cyan}{rgb2cyanG}ifelse}{{rgb2key}{rgb2keyG}ifelse}ifelse}ifelse}ifelse}ifelse
1 exch sub setgray}bd/dc{0 def}bd/aca{/v_cpnone 0 def/v_cpcy 1 def
/v_cpyl 2 def/v_cpmg 3 def/v_cpky 4 def/v_gseps 0 def/v_keyg 0 def
/v_plate v_cpnone def/v_mono 0 def/v_wr dc/v_fc dc/v_fm dc/v_fy dc
/v_fk dc/v_fg dc/v_fr dc/v_fg dc/v_fb dc/v_sc dc/v_sm dc/v_sy dc/v_sk
dc/v_sg dc/v_sr dc/v_sg dc/v_sb dc/v_sct 0 def/v_fct 0 def/v_ft 0 def
/v_cxe 0 def/v_cxm 0 def/v_sa -1 def/v_ea -1 def/sR dc/sG dc/sB dc
/mR dc/mG dc/mB dc/eR dc/eG dc/eB dc/sC dc/sM dc/sY dc/sK dc/eC dc
/eM dc/eY dc/eK dc/sH dc/sS dc/sV dc/eH dc/eS dc/eV dc/sGy dc/eGy
dc/mGy dc/ci_datasrc dc/ci_matrix dc/ci_dataleft dc/ci_buf dc/ci_dataofs
dc/ci_y dc/rciBuf dc/cbslw dc/cmiBuf dc/cPalette dc/cpci_datasrc dc
/cpci_matrix dc/cpci_bpp dc/cpci_y dc/cpci_sampsleft dc/cpci_nextcol
dc/cpci_buf dc/startX dc/startY dc/endX dc/endY dc/endX2 dc/endY2 dc
/fillX dc/urx dc/ury dc/llx dc/lly dc/incD dc/distance dc/slice dc
/startangle dc/Steps dc/incH dc/incS dc/incV dc/incR dc/incG dc/incB
dc/incGy dc 0.25 setlinewidth [] 0 setdash 0 setlinejoin 0 setlinecap}bd
aca/setplategray{v_plate v_cpky eq{1 exch sub setgray pop pop pop}{v_plate
v_cpyl eq{pop 1 exch sub setgray pop pop}{v_plate v_cpmg eq{pop pop
1 exch sub setgray pop}{v_plate v_cpcy eq{pop pop pop 1 exch sub setgray}{1
exch sub setgray pop pop pop}ifelse}ifelse}ifelse}ifelse}bd/setplatecolor{v_plate
v_cpky eq{1 exch sub 0 0 0 4 -1 roll setcmykcolor pop pop pop}{v_plate
v_cpyl eq{pop 1 exch sub 0 0 0 4 2 roll setcmykcolor pop pop}{v_plate
v_cpmg eq{pop pop 1 exch sub 0 0 0 4 1 roll setcmykcolor pop}{v_plate
v_cpcy eq{pop pop pop 1 exch sub 0 0 0 setcmykcolor}{1 exch sub 0 0
0 4 -1 roll setcmykcolor pop pop pop}ifelse}ifelse}ifelse}ifelse}bd
/setcmykcolor where{pop}{/setcmykcolor{cmyk2rgb setrgbcolor}bd}ifelse
/setlogcmykcolor{v_gseps 1 eq{v_mono 1 eq{1 exch sub setgray pop pop
pop}{setcmykcolor}ifelse}{v_mono 1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd
/setlogrgbcolor{v_gseps 1 eq{v_mono 1 eq{rgbtoplategray}{rgb2devcmyk
setplatecolor}ifelse}{v_mono 1 eq{rgb2gray setgray}{systemdict begin
setrgbcolor end}ifelse}ifelse}bd/setfillcolor{v_fct 0 eq{v_fc v_fm
v_fy v_fk setlogcmykcolor}{v_fr v_fg v_fb setlogrgbcolor}ifelse}bd
/setstrokecolor{v_sct 0 eq{v_sc v_sm v_sy v_sk setlogcmykcolor}{v_sr
v_sg v_sb setlogrgbcolor}ifelse}bd/setgfillcmyk{v_gseps 1 eq{v_mono
1 eq{cmyk2rgb rgb2plategray}{cmyk2rgb rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd/setgfillrgb{v_gseps
1 eq{v_mono 1 eq{rgb2plategray}{rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{rgb2gray setgray}{systemdict begin setrgbcolor end}ifelse}ifelse}bd
/setgfillhsb{v_gseps 1 eq{v_mono 1 eq{systemdict begin sethsbcolor
currentrgbcolor end rgb2plategray}{systemdict begin sethsbcolor currentrgbcolor
end rgb2devcmyk setplatecolor}ifelse}{v_mono 1 eq{systemdict begin
sethsbcolor currentgray end setgray}{systemdict begin sethsbcolor end}ifelse}ifelse}bd
/Max{2 copy lt{exch}if pop}bd/Max3{2 copy lt{exch}if pop 2 copy lt{exch}if
pop}bd/Min{2 copy gt{exch}if pop}bd/Min3{2 copy gt{exch}if pop 2 copy
gt{exch}if pop}bd/clamp{3 1 roll Max 2 1 roll Min}bd/clamp01{0 Max
1 Min}bd/Pythag{dup mul exch dup mul add sqrt}bd/ssc{DeviceRGB setcolorspace
setcolor}bd/ssg{setgray}bd/p_render{}def/p_count 0 def/vis_flag true
def/DataString 3 string def/DataSrc{currentfile DataString readhexstring
pop}bd/DataStr1 1 string def/DataStr2 1 string def/DataStr3 1 string
def/DataSrc1{DataStr1}bd/DataSrc2{DataStr2}bd/DataSrc3{DataStr3}bd
/colorimage where{pop/ci{colorimage}bd}{/ci{pop pop/ci_datasrc exch
def matrix invertmatrix/ci_matrix exch def pop/ci_dataleft 0 def/ci_buf()def
/ci_dataofs 0 def 0 1 3 -1 roll 1 sub{/ci_y exch def dup 0 1 3 -1
roll 1 sub{0 1 2{pop ci_dataleft 0 eq{ci_datasrc dup length/ci_dataleft
exch def/ci_buf exch def/ci_dataofs 0 def}if ci_buf ci_dataofs get
255 div/ci_dataofs ci_dataofs 1 add def/ci_dataleft ci_dataleft 1 sub
def}for setrgbcolor dup ci_y 3 -1 roll 1 add ci_y 1 add 4 copy 5 1
roll 4 2 roll 5 -1 roll 1 1 4{pop ci_matrix transform 8 2 roll}for
m l l l closepath fill}for}for pop}bd}ifelse/rci{/rciBuf 4 index 3
index mul 7 add 8 div floor cvi string def{currentfile rciBuf readhexstring
pop}bind false 3 ci}bd/cbsl{2 eq/cbslL2 xd 5 index/cbslw xd translate
scale 8 [ 3 index 0 0 5 index 0 0 ] cbslL2{/DataStr1 cbslw string def
currentfile/ASCII85Decode filter/RunLengthDecode filter DataStr1 readstring
pop pop/DataStr2 cbslw string def currentfile/ASCII85Decode filter
/RunLengthDecode filter DataStr2 readstring pop pop/DataStr3 cbslw
string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr3 readstring pop pop{DataStr1}bind{DataStr2}bind{DataStr3}bind
true}{/DataSrc load false}ifelse 3 ci}bd/gbsl{2 eq/gbslL2 xd 5 index
/gbslw xd translate scale 8 [ 3 index 0 0 5 index 0 0 ] gbslL2{/DataStr1
gbslw string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr1 readstring pop pop{DataStr1}bind}{/DataStr1 gbslw string def
currentfile DataSrc1 readhexstring pop pop{DataStr1}bind}ifelse image}bd
/cmi{/cmiBuf 4 index 3 index mul 7 add 8 div floor cvi string def{currentfile
cmiBuf readhexstring pop}bind image}bd/cpal{4 mul string/cPalette exch
def currentfile cPalette readhexstring pop}bd/cpci{/cpci_datasrc exch
def matrix invertmatrix/cpci_matrix exch def/cpci_bpp exch def cpci_init
0 1 3 -1 roll 1 sub{/cpci_y exch def dup cpci_bpp 4 eq{cpci_sampsleft
1 eq{/cpci_sampsleft 0 def}if}if 0 1 3 -1 roll 1 sub{cpci_nextcol dup
cpci_y 3 -1 roll 1 add cpci_y 1 add 4 copy 5 1 roll 4 2 roll 5 -1 roll
1 1 4{pop cpci_matrix transform 8 2 roll}for m l l l closepath fill}for}for
pop}bd/cpci_init{/cpci_sampsleft 0 def}bd/cpci_buf 1 string def/cpci_nextcol{cpci_bpp
1 eq{cpci_sampsleft 0 eq{currentfile cpci_buf readhexstring pop pop
/cpci_sampsleft 8 def}if cpci_buf dup 0 get dup 1 and setgray -1 bitshift
1 exch put/cpci_sampsleft cpci_sampsleft 1 sub def}{cpci_bpp 4 eq{cpci_sampsleft
0 eq{currentfile cpci_buf readhexstring pop pop/cpci_sampsleft 2 def}if
cpci_buf 0 get dup 15 and exch -4 bitshift cpci_buf 0 3 -1 roll put
/cpci_sampsleft cpci_sampsleft 1 sub def}{currentfile cpci_buf readhexstring
pop 0 get}ifelse 4 mul dup 2 add cPalette exch get 255 div exch dup
1 add cPalette exch get 255 div exch cPalette exch get 255 div setrgbcolor}ifelse}bd
/setup1asciiproc{[ currentfile mystring/readhexstring cvx/pop cvx
] cvx bind}bd/setup1binaryproc{[ currentfile mystring/readstring cvx
/pop cvx ] cvx bind}bd level2{save/dontloadlevel1 xd}if/iw 0 def/ih
0 def/im_save 0 def/setupimageproc 0 def/polarity 0 def/smoothflag
0 def/mystring 0 def/bpc 0 def/beginimage{/im_save save def dup 0 eq{pop
/setup1binaryproc}{1 eq{/setup1asciiproc}{(error, can't use level2 data acquisition procs for level1)print
flush}ifelse}ifelse/setupimageproc exch ld/polarity xd/smoothflag xd
/imat xd/mystring exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save
restore}bd/1bitbwcopyimage{1 setgray 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill 0 setgray iw ih polarity imat setupimageproc
imagemask}bd/1bitcopyimage{setrgbcolor 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill setrgbcolor iw ih polarity imat setupimageproc
imagemask}bd/1bitmaskimage{setrgbcolor iw ih polarity [iw 0 0 ih 0
0] setupimageproc imagemask}bd level2{dontloadlevel1 restore}if level2
not{save/dontloadlevel2 xd}if/setup2asciiproc{currentfile/ASCII85Decode
filter/RunLengthDecode filter}bd/setup2binaryproc{currentfile/RunLengthDecode
filter}bd/myimagedict 9 dict dup begin/ImageType 1 def/MultipleDataSource
false def end def/im_save 0 def/setupimageproc 0 def/polarity 0 def
/smoothflag 0 def/mystring 0 def/bpc 0 def/ih 0 def/iw 0 def/beginimage{
/im_save save def dup 2 eq{pop/setup2binaryproc}{dup 3 eq{pop/setup2asciiproc}{0
eq{/setup1binaryproc}{/setup1asciiproc}ifelse}ifelse}ifelse/setupimageproc
exch ld{[ 1 0 ]}{[ 0 1 ]}ifelse/polarity xd/smoothflag xd/imat xd/mystring
exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save restore}bd/1bitbwcopyimage{1
ssg 0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill
0 ssg myimagedict dup begin/Width iw def/Height ih def/Decode polarity
def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitcopyimage{ssc
0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitmaskimage{ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd level2 not{dontloadlevel2
restore}if
level2{save/dontloadlevel1 xd}if/startnoload{{/noload save def}if}bd
/endnoload{{noload restore}if}bd/testsystemdict{where{systemdict eq{true}{false}ifelse}{false}ifelse}bd
/ncolors 1 def/colorimage where{pop true}{false}ifelse{/ncolors 0
statusdict begin/processcolors where{pop pop processcolors}{/deviceinfo
where{pop deviceinfo/Colors known{pop{deviceinfo/Colors get}}if}if}ifelse
end def ncolors 0 ne{/colorimage testsystemdict/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict/currentcmykcolor testsystemdict
and and and not{/ncolors 0 def}if}if}if ncolors dup 1 ne exch dup 3
ne exch 4 ne and and{/ncolors 0 def}if ncolors 1 eq dup dup not startnoload{
/expandbw{expandfactor mul round cvi bwclut exch get 255 div}bd/doclutimage{bwclut
colorclut pop/bwclut xd bpc dup 8 eq{pop 255}{4 eq{15}{3}ifelse}ifelse
/expandfactor xd [/expandbw load/exec load dup currenttransfer exch
] cvx bind settransfer iw ih bpc imat setupimageproc image}bd}if not
endnoload ncolors dup 3 eq exch 4 eq or dup dup not startnoload{/nullproc{{}}def
/concatutil{/exec load 7 -1 roll/exec load}bd/defsubclut{1 add getinterval
def}bd/spconcattransfer{/Dclut exch def/Cclut exch def/Bclut exch def
/Aclut exch def/ncompute exch ld currentcolortransfer [{Aclut ncompute}concatutil
] cvx [{Bclut ncompute}concatutil ] cvx [{Cclut ncompute}concatutil
] cvx [{Dclut ncompute}concatutil ] cvx setcolortransfer}bd/setuprgbcluts{
/bit3x rgbclut length 3 sub def/bit1x bit3x 3 idiv def/rclut rgbclut
def/gclut rclut 1 bit3x defsubclut/bclut rclut 2 bit3x defsubclut}bd}if
not endnoload ncolors 3 eq dup dup not startnoload{/3compute{exch bit3x
mul round cvi get 255 div}bd/doclutimage{/rgbclut xd pop setuprgbcluts
/3compute rclut gclut bclut dup spconcattransfer iw ih bpc imat [
setupimageproc/exec load/dup load dup ] cvx nullproc nullproc true
3 colorimage}bd}if not endnoload ncolors 4 eq dup dup not startnoload{
/stuffclut{cmykindex 3 -1 roll put}bd/ftoint{1 exch sub 255 mul round
cvi}bd/4compute{exch bit4x mul round cvi get 255 div}bd/computecmykclut{setuprgbcluts
/bit4x rgbclut length 3 idiv 4 mul 4 sub def/cmykclut bit4x 4 add
string def/cclut cmykclut def/mclut cclut 1 bit4x defsubclut/yclut
cclut 2 bit4x defsubclut/kclut cclut 3 bit4x defsubclut/cmykindex 0
def 0 1 bit1x{dup/cmykindex exch bit1x exch sub 4 mul def 3 mul dup
rclut exch get 255 div exch dup gclut exch get 255 div exch bclut exch
get 255 div setrgbcolor currentcmykcolor ftoint kclut stuffclut ftoint
yclut stuffclut ftoint mclut stuffclut ftoint cclut stuffclut}for}bd
/doclutimage{/rgbclut xd pop invalidcolortable?{computecmykclut}if
/4compute cclut mclut yclut kclut spconcattransfer iw ih bpc imat
[ setupimageproc/exec load/dup load dup dup ] cvx nullproc nullproc
nullproc true 4 colorimage}bd}if not endnoload ncolors 0 eq dup dup
not startnoload{/lookupandstore{3 mul 3 getinterval putinterval exch
3 add exch 3 copy}bd/8lookup/lookupandstore ld/4lookup{/byte 1 index
def -4 bitshift lookupandstore byte 15 and lookupandstore}bd/2lookup{
/byte 1 index def -6 bitshift lookupandstore byte -4 bitshift 3 and
lookupandstore byte -2 bitshift 3 and lookupandstore byte 3 and lookupandstore}bd
/colorexpand{mystringexp 0 rgbclut 3 copy 7 -1 roll/mylookup load
forall pop pop pop pop pop}bd/createexpandstr{/mystringexp exch mystring
length mul string def}bd/doclutimage{/rgbclut xd pop/mylookup bpc 8
eq{3 createexpandstr/8lookup}{bpc 4 eq{6 createexpandstr/4lookup}{12
createexpandstr/2lookup}ifelse}ifelse ld iw ih bpc imat [ setupimageproc
/exec load/colorexpand load/exec load] cvx false 3 colorimage}bd}if
not endnoload/colorimage where{pop true}{false}ifelse dup{/do24image{iw
ih 8 imat setupimageproc false 3 colorimage}bd}if dup dup startnoload
not{/rgbtogray{/str xd/len str length def/smlen len 3 idiv def/rstr
str def/gstr str 1 len 1 sub getinterval def/bstr str 2 len 2 sub getinterval
def str dup 0 1 smlen 1 sub{dup 3 mul rstr 1 index get .3 mul gstr
2 index get .59 mul add bstr 3 -1 roll get .11 mul add round cvi put
dup}for pop 0 smlen getinterval}bd/do24image{iw ih 8 imat [ setupimageproc
/exec load/rgbtogray load/exec load ] cvx bind image}bd}if endnoload
/doimage{iw ih 8 imat setupimageproc image}bd level2{dontloadlevel1
restore}if level2 not{save/dontloadlevel2 xd}if/myappcolorspace/DeviceRGB
def/rgbclut 0 def/doclutimage{/rgbclut xd pop bpc dup 8 eq{pop 255}{4
eq{15}{3}ifelse}ifelse/hival xd [/Indexed myappcolorspace hival rgbclut]
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 hival] def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
bpc def/Interpolate smoothflag def end image}bd/do24image{myappcolorspace
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 1 0 1 0 1] def/ImageMatrix imat def/DataSource setupimageproc def
/BitsPerComponent 8 def/Interpolate smoothflag def end image}bd level2
not{dontloadlevel2 restore}if
/NumSteps{dtransform matrix defaultmatrix idtransform Pythag currentscreen
pop pop 72 exch div div}bd/FindMinSteps{v_ft 4 eq{urx startX sub abs
llx startX sub abs Max ury startY sub abs lly startY sub abs Max Pythag
2 3.14159265 mul mul 0}{v_ft 2 eq{endY startY sub endX startX sub Pythag
endY2 startY sub endX2 startX sub Pythag gt{endY startY sub endX startX
sub}{endY2 startY sub endX2 startX sub}ifelse}{endY startY sub endX
startX sub}ifelse}ifelse NumSteps}bd/cxe{/v_cxe exch def}bd/cxm{pop
/v_cxm exch def}bd/cxmt{pop pop}bd/cxt{pop}bd/S_eoclip{currentflat{{eoclip}stopped{dup
currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: eoclip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_clip{currentflat{{clip}stopped{dup currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: clip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_eofill{currentflat{{eofill}stopped{dup currentflat exch sub 20
gt{([Error: PathTooComplex; OffendingCommand: eofill]\n)print flush
exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/gpbbx{pathbbox/ury exch def/urx exch def/lly exch def/llx exch def}bd
/lineargfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def endY startY sub endX
startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx eGy ssg newpath llx lly urx ury Bx S_eofill sGy ssg newpath
llx lly 0 ury Bx S_eofill/fillX 0 def 0 1 Steps 1 sub{stepgfx newpath
fillX lly fillX incD add dup/fillX exch def ury Bx S_eofill pop}for}if}bd
/radialgfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def eGy ssg newpath llx
lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepgfx newpath
startX startY distance 0 360 arc closepath distance incD add dup/distance
exch def 0 rmoveto startX startY distance 0 360 arc closepath S_eofill
pop}for}if}bd/ellipticgfill{initgfill{true initgfx sGy ssg newpath
llx lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2
startX sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepgfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for}if}bd/conicalgfill{initgfill{urx
startX sub abs llx startX sub abs Max ury startY sub abs lly startY
sub abs Max Pythag startY endY sub startX endX sub Pythag div/radius
exch def true initgfx [ endX startX sub endY startY sub startY endY
sub endX startX sub startX startY ] concat/slice 180 Steps div def
/startangle 0 def Steps -1 0{pop stepgfx 0 0 moveto 0 0 radius startangle
neg dup slice add arc fill 0 0 moveto 0 0 radius startangle dup slice
add dup/startangle exch def arc fill}for}if}bd/initgfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and sGy eGy eq or dup{sGy ssg newpath
llx lly urx ury Bx S_eofill}if not}bd/initgfx{/flag exch def flag{sGy
eGy/sGy exch def/eGy exch def}if eGy sGy sub abs 256 mul FindMinSteps
Min 256 Min ceiling 1 Max/Steps exch def eGy sGy sub Steps div/incGy
exch def sGy/mGy exch def}bd/stepgfx{mGy ssg mGy incGy add/mGy exch
def}bd/linearfill{initfill{false initfx endX startX sub endY startY
sub Pythag/distance exch def/incD distance Steps div def endY startY
sub endX startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx v_cxe 0 eq{eR eG eB setgfillrgb}{eH eS eV setgfillhsb}ifelse
newpath llx lly urx ury Bx S_eofill v_cxe 0 eq{sR sG sB setgfillrgb}{sH
sS sV setgfillhsb}ifelse newpath llx lly 0 ury Bx S_eofill/fillX 0
def 0 1 Steps 1 sub{stepfx newpath fillX lly fillX incD add dup/fillX
exch def ury Bx S_eofill pop}for}if}bd/radialfill{initfill{false initfx
endX startX sub endY startY sub Pythag/distance exch def/incD distance
Steps div def v_cxe 0 eq{eR eG eB setgfillrgb}{eH eS eV setgfillhsb}ifelse
newpath llx lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepfx
newpath startX startY distance 0 360 arc closepath distance incD add
dup/distance exch def 0 rmoveto startX startY distance 0 360 arc closepath
S_eofill pop}for}if}bind def/ellipticalfill{initfill{true initfx v_cxe
0 eq{sR sG sB setgfillrgb}{sH sS sV setgfillhsb}ifelse newpath llx
lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2 startX
sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for v_cxe 0
eq{sR sG sB eR eG eB/sB exch def/sG exch def/sR exch def/eB exch def
/eG exch def/eR exch def}if}if}bd/conicalfill{initfill{urx startX
sub abs llx startX sub abs Max ury startY sub abs lly startY sub abs
Max Pythag startY endY sub startX endX sub Pythag div/radius exch def
true initfx [ endX startX sub endY startY sub startY endY sub endX
startX sub startX startY ] concat/slice 180 Steps div def/startangle
0 def Steps -1 0{pop stepfx 0 0 moveto 0 0 radius startangle neg dup
slice add arc fill 0 0 moveto 0 0 radius startangle dup slice add dup
/startangle exch def arc fill}for}if}bd/initfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and v_cxe 2 ne sR eR eq sG eG eq and
sB eB eq and and or dup{sR sG sB setgfillrgb newpath llx lly urx ury
Bx S_eofill}if not}bd/initfx{/flag exch def v_cxe 0 eq{flag{sR sG sB
eR eG eB/sB exch def/sG exch def/sR exch def/eB exch def/eG exch def
/eR exch def}if eR sR sub abs 256 mul eG sG sub abs 256 mul Max eB
sB sub abs 256 mul Max FindMinSteps Min 256 Min ceiling 1 Max/Steps
exch def/incR eR sR sub Steps div def/incG eG sG sub Steps div def
/incB eB sB sub Steps div def sR/mR exch def sG/mG exch def sB/mB
exch def}{sR sG sB rgb2hsb/sV exch def/sS exch def/sH exch def eR eG
eB rgb2hsb/eV exch def/eS exch def/eH exch def eH sH sub abs v_cxe
1 eq{dup 0.5 gt{1 exch sub}if}{dup 0.5 lt{1 exch sub}if}ifelse 256
mul eS sS sub abs 256 mul Max eV sV sub abs 256 mul Max FindMinSteps
Min 256 Min ceiling 1 Max/Steps exch def v_cxe 1 eq{/incH eH sH sub
dup abs 0.5 gt{dup 0 ge{1 sub}{1 add}ifelse}if Steps div def/incS eS
sS sub Steps div def/incV eV sV sub Steps div def}{/incH eH sH sub
dup abs 0.5 le{dup 0 ge{1 sub}{1 add}ifelse}if Steps div def/incS eS
sS sub Steps div def/incV eV sV sub Steps div def}ifelse flag{/sH eH
/eH sH def def/sS eS/eS sS def def/sV eV/eV sV def def/incH incH neg
def/incS incS neg def/incV incV neg def}if}ifelse}bd/stepfx{v_cxe 0
eq{mR mG mB setgfillrgb mR incR add/mR exch def mG incG add/mG exch
def mB incB add/mB exch def}{sH sS sV setgfillhsb sH incH add dup 0
le{1 add}{dup 1 ge{1 sub}if}ifelse/sH exch def sS incS add/sS exch
def sV incV add/sV exch def}ifelse}bd
/ar{}bd/arr{pop pop pop pop pop pop pop}bd/ae{pop pop pop pop pop
pop}bd/aoa{pop}bd/apl{pop}bd/apc{}bd/aof{pop pop}bd/aafs{pop pop pop}bd
/O{pop}bd/R{pop}bd/axop{pop pop pop pop}bd/g{/v_ft 0 def/v_fc 0 def
/v_fm 0 def/v_fy 0 def 1 exch sub/v_fk exch def/v_fct 0 def}bd/G{
/v_sc 0 def/v_sm 0 def/v_sy 0 def 1 exch sub/v_sk exch def/v_sct 0
def}bd/k{/v_fk exch def/v_fy exch def/v_fm exch def/v_fc exch def/v_ft
0 def/v_fct 0 def}bd/K{/v_sk exch def/v_sy exch def/v_sm exch def/v_sc
exch def/v_sct 0 def}bd/Xa{/v_fb exch def/v_fg exch def/v_fr exch def
/v_ft 0 def/v_fct 1 def}bd/XA{/v_sb exch def/v_sg exch def/v_sr exch
def/v_sct 1 def}bd/a_tc{exch pop 1 exch sub dup 3 -1 roll exch div
exch dup 4 -1 roll exch div 3 1 roll dup 5 -1 roll exch div 4 1 roll
5 -1 roll exch div 4 1 roll}bd/x{a_tc k}bd/X{a_tc K}bd/Xx{0 eq{x}{pop
pop Xa}ifelse}bd/XX{0 eq{X}{pop pop XA}ifelse}bd/awr{/v_wr exch def}bd
/w{setlinewidth}bd/j{setlinejoin}bd/J{setlinecap}bd/d{setdash}bd/asc{pop
pop J}bd/aec{pop pop J}bd/csah{pop pop pop}bd/ceah{pop pop pop}bd/cst{pop
pop}bd/cdp{pop}bd/m{moveto}bd/l{lineto}bd/c{curveto}bd/Bx{4 copy 5
1 roll 4 2 roll 5 -1 roll m l l l closepath}bd/Cp{Bx clip newpath}bd
/a_fp{gsave v_wr 0 ne v_ft 0 eq{setfillcolor{eofill}{fill}ifelse}{v_ft
1 eq{linearfill}{v_ft 2 eq{ellipticalfill}{v_ft 3 eq{radialfill}{v_ft
4 eq{conicalfill}{v_ft 8 eq{lineargfill}{v_ft 9 eq{ellipticgfill}{v_ft
10 eq{radialgfill}{conicalgfill}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse
grestore}bd/*u{/p_count p_count 1 add def}bd/*U{/p_count p_count 1
sub def p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd/B{/p_render{a_fp
setstrokecolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/b{closepath B}bd/F{/p_render{a_fp newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/f{closepath F}bd/S{/p_render{setstrokecolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/s{closepath S}bd/H{/p_render{newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/h{closepath H}bd/N{H}bd/n{h}bd/cag{dup 7 add/v_ft exch def dup 2
eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 8 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def/eGy exch
def/sGy exch def}bd/caz{dup/v_ft exch def dup 2 eq{pop/endY2 exch def
/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse/endY exch def/endX
exch def/startY exch def/startX exch def/eB exch def/eG exch def/eR
exch def/sB exch def/sG exch def/sR exch def}bd/cax{dup/v_ft exch def
dup 2 eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def pop pop
8 3 roll pop pop/sB exch def/sG exch def/sR exch def/eB exch def/eG
exch def/eR exch def}bd/axm{/endY exch def/endX exch def/startY exch
def/startX exch def}bd/alyr{pop pop 1 eq{true}{false}ifelse/vis_flag
exch def pop pop}bd
/t{moveto show}bd/ts{moveto false charpath S}bd/tf{moveto true charpath
F}bd/tb{3 copy moveto true charpath F moveto false charpath S}bd/selectfont
where{pop}{/selectfont{dup type/integertype eq{exch findfont exch scalefont
setfont}{exch findfont exch makefont setfont}ifelse}bd}ifelse/sf{selectfont}bd
/u{}bd/U{}bd/anu{pop}bd
end
%%EndResource
%%EndProlog
%%BeginSetup
save XaraStudio1Dict begin
%%EndSetup
0 cxe
2 0 cxm
1 awr
0.00 0.00 0.00 (Black) 0 1 XX
0.500 w
2 j
[ ] 0 d
0 J
0.00 0.00 0.00 (Black) 0 1 Xx
225 210 m
224.899 312.005 l
S
221.650 310.376 m
224.899 311.463 l
228.150 310.383 l
224.890 320.129 l
f
216 217.500 m
386.250 217.500 l
S
384.625 220.749 m
385.708 217.500 l
384.625 214.250 l
394.374 217.500 l
f
262.500 215.250 m
262.500 261.650 l
S
300 215.250 m
300 287.250 l
S
337.500 215.250 m
337.500 278.999 l
S
248.250 232.500 m
251.250 242.250 255.402 253.550 262.500 261.750 c
272.393 273.179 285.262 283.891 300 287.250 c
309.858 289.497 320.741 286.814 330 282.750 c
349.698 274.104 369.750 258 380.250 242.250 c
S
1.00 0.00 0.00 (Red) 0 1 XX
[ 7.998 2 ] 0 d
1.00 0.00 0.00 (Red) 0 1 Xx
262.500 261.750 m
337.500 279 l
S
0.00 0.00 0.00 (Black) 0 1 XX
[ ] 0 d
0.00 0.00 0.00 (Black) 0 1 Xx
276.100 281.998 m
323.350 292.606 l
S
0.250 w
377.475 221.475 m
379.369 224.170 l
377.616 226.660 l
378.715 226.660 l
379.511 225.444 l
379.657 225.210 379.779 225.019 379.872 224.863 c
380.014 225.078 380.145 225.268 380.268 225.434 c
381.142 226.660 l
382.191 226.660 l
380.399 224.218 l
382.328 221.475 l
381.249 221.475 l
380.185 223.086 l
379.901 223.520 l
378.539 221.475 l
377.475 221.475 l
f
232.333 303.233 m
232.236 304.058 l
232.426 304.009 232.592 303.980 232.739 303.980 c
232.934 303.980 233.090 304.014 233.207 304.077 c
233.325 304.146 233.417 304.234 233.496 304.351 c
233.549 304.439 233.637 304.658 233.764 305.005 c
233.779 305.054 233.803 305.127 233.842 305.220 c
231.875 310.415 l
232.822 310.415 l
233.901 307.412 l
234.038 307.031 234.165 306.631 234.277 306.211 c
234.375 306.611 234.497 307.007 234.638 307.393 c
235.747 310.415 l
236.625 310.415 l
234.653 305.142 l
234.438 304.575 234.277 304.180 234.160 303.965 c
234.003 303.677 233.823 303.467 233.623 303.330 c
233.417 303.193 233.178 303.125 232.900 303.125 c
232.729 303.125 232.539 303.164 232.333 303.233 c
f
298.020 208.431 m
299.914 211.126 l
298.161 213.616 l
299.260 213.616 l
300.056 212.400 l
300.202 212.166 300.324 211.975 300.417 211.819 c
300.559 212.034 300.690 212.224 300.813 212.390 c
301.687 213.616 l
302.736 213.616 l
300.944 211.174 l
302.873 208.431 l
301.794 208.431 l
300.730 210.042 l
300.446 210.476 l
299.084 208.431 l
298.020 208.431 l
f
*u
303.279 210.505 m
303.279 211.011 l
303.718 211.011 l
303.718 210.505 l
303.279 210.505 l
f
303.279 207.432 m
303.279 210.024 l
303.718 210.024 l
303.718 207.432 l
303.279 207.432 l
f
*U
259.870 208.431 m
261.764 211.126 l
260.011 213.616 l
261.110 213.616 l
261.906 212.400 l
262.052 212.166 262.174 211.975 262.267 211.819 c
262.409 212.034 262.540 212.224 262.663 212.390 c
263.537 213.616 l
264.586 213.616 l
262.794 211.174 l
264.723 208.431 l
263.644 208.431 l
262.580 210.042 l
262.296 210.476 l
260.934 208.431 l
259.870 208.431 l
f
*u
265.129 210.505 m
265.129 211.011 l
265.568 211.011 l
265.568 210.505 l
265.129 210.505 l
f
265.129 207.432 m
265.129 210.024 l
265.568 210.024 l
265.568 207.432 l
265.129 207.432 l
f
*U
266.066 208.506 m
266.066 208.948 l
267.416 208.948 l
267.416 208.506 l
266.066 208.506 l
f
269.435 207.432 m
268.996 207.432 l
268.996 210.232 l
268.888 210.129 268.749 210.029 268.578 209.929 c
268.407 209.826 268.254 209.751 268.117 209.702 c
268.117 210.127 l
268.361 210.241 268.576 210.381 268.761 210.547 c
268.944 210.710 269.074 210.869 269.152 211.025 c
269.435 211.025 l
269.435 207.432 l
f
335.475 208.431 m
337.369 211.126 l
335.616 213.616 l
336.715 213.616 l
337.511 212.400 l
337.657 212.166 337.779 211.975 337.872 211.819 c
338.014 212.034 338.145 212.224 338.268 212.390 c
339.142 213.616 l
340.191 213.616 l
338.399 211.174 l
340.328 208.431 l
339.249 208.431 l
338.185 210.042 l
337.901 210.476 l
336.539 208.431 l
335.475 208.431 l
f
*u
340.734 210.505 m
340.734 211.011 l
341.173 211.011 l
341.173 210.505 l
340.734 210.505 l
f
340.734 207.432 m
340.734 210.024 l
341.173 210.024 l
341.173 207.432 l
340.734 207.432 l
f
*U
342.765 208.010 m
342.765 208.991 l
341.791 208.991 l
341.791 209.402 l
342.765 209.402 l
342.765 210.376 l
343.180 210.376 l
343.180 209.402 l
344.154 209.402 l
344.154 208.991 l
343.180 208.991 l
343.180 208.010 l
342.765 208.010 l
f
346.295 207.432 m
345.856 207.432 l
345.856 210.232 l
345.748 210.129 345.609 210.029 345.438 209.929 c
345.267 209.826 345.114 209.751 344.977 209.702 c
344.977 210.127 l
345.221 210.241 345.436 210.381 345.621 210.547 c
345.804 210.710 345.934 210.869 346.012 211.025 c
346.295 211.025 l
346.295 207.432 l
f
366.419 260.003 m
366.322 260.828 l
366.512 260.779 366.678 260.750 366.825 260.750 c
367.020 260.750 367.176 260.784 367.293 260.847 c
367.411 260.916 367.503 261.004 367.582 261.121 c
367.635 261.209 367.723 261.428 367.850 261.775 c
367.865 261.824 367.889 261.897 367.928 261.990 c
365.961 267.185 l
366.908 267.185 l
367.987 264.182 l
368.124 263.801 368.251 263.401 368.363 262.981 c
368.461 263.381 368.583 263.777 368.724 264.163 c
369.833 267.185 l
370.711 267.185 l
368.739 261.912 l
368.524 261.345 368.363 260.950 368.246 260.735 c
368.089 260.447 367.909 260.237 367.709 260.100 c
367.503 259.963 367.264 259.895 366.986 259.895 c
366.815 259.895 366.625 259.934 366.419 260.003 c
f
*u
376.083 266.208 m
371.356 266.208 l
371.356 267.029 l
376.083 267.029 l
376.083 266.208 l
f
376.083 264.036 m
371.356 264.036 l
371.356 264.856 l
376.083 264.856 l
376.083 264.036 l
f
*U
*u
379.429 261.930 m
380.659 262.099 381.539 263.219 381.539 264.629 c
381.539 265.999 380.699 266.989 379.429 267.079 c
379.429 267.879 l
379.429 268.249 379.439 268.439 379.459 268.669 c
378.989 268.859 l
379.009 268.619 379.019 268.369 379.019 267.969 c
379.019 267.079 l
377.819 266.939 376.909 265.799 376.909 264.419 c
376.909 263.029 377.769 262.009 379.019 261.910 c
379.019 260.900 l
379.019 260.450 379.009 260.170 378.989 259.890 c
379.459 259.780 l
379.439 260.110 379.439 260.140 379.429 260.580 c
379.429 260.850 l
379.429 261.930 l
f
379.019 262.329 m
378.739 262.439 378.539 262.599 378.389 262.829 c
378.069 263.319 377.879 264.079 377.879 264.869 c
377.879 265.999 378.309 266.699 379.019 266.729 c
379.019 262.329 l
f
379.429 266.659 m
380.139 266.399 380.569 265.449 380.569 264.179 c
380.569 262.999 380.159 262.319 379.429 262.279 c
379.429 266.659 l
f
*U
384.188 259.895 m
383.700 260.510 383.290 261.223 382.958 262.043 c
382.621 262.864 382.455 263.713 382.455 264.592 c
382.455 265.364 382.577 266.106 382.831 266.819 c
383.124 267.639 383.573 268.459 384.188 269.279 c
384.818 269.279 l
384.423 268.601 384.164 268.117 384.037 267.829 c
383.837 267.380 383.680 266.911 383.568 266.423 c
383.427 265.813 383.358 265.202 383.358 264.587 c
383.358 263.020 383.842 261.458 384.818 259.895 c
384.188 259.895 l
f
385.253 262 m
387.147 264.695 l
385.394 267.185 l
386.493 267.185 l
387.289 265.969 l
387.435 265.735 387.557 265.544 387.650 265.388 c
387.792 265.603 387.923 265.793 388.046 265.959 c
388.920 267.185 l
389.969 267.185 l
388.177 264.743 l
390.106 262 l
389.027 262 l
387.963 263.611 l
387.679 264.045 l
386.317 262 l
385.253 262 l
f
391.415 259.895 m
390.785 259.895 l
391.757 261.458 392.245 263.020 392.245 264.587 c
392.245 265.198 392.172 265.803 392.035 266.409 c
391.923 266.897 391.766 267.365 391.571 267.815 c
391.444 268.108 391.180 268.596 390.785 269.279 c
391.415 269.279 l
392.025 268.459 392.479 267.639 392.772 266.819 c
393.021 266.106 393.148 265.364 393.148 264.592 c
393.148 263.713 392.977 262.864 392.640 262.043 c
392.303 261.223 391.893 260.510 391.415 259.895 c
f
*u
297.239 290.330 m
298.469 290.499 299.349 291.619 299.349 293.029 c
299.349 294.399 298.509 295.389 297.239 295.479 c
297.239 296.279 l
297.239 296.649 297.249 296.839 297.269 297.069 c
296.799 297.259 l
296.819 297.019 296.829 296.769 296.829 296.369 c
296.829 295.479 l
295.629 295.339 294.719 294.199 294.719 292.819 c
294.719 291.429 295.579 290.409 296.829 290.310 c
296.829 289.300 l
296.829 288.850 296.819 288.570 296.799 288.290 c
297.269 288.180 l
297.249 288.510 297.249 288.540 297.239 288.980 c
297.239 289.250 l
297.239 290.330 l
f
296.829 290.729 m
296.549 290.839 296.349 290.999 296.199 291.229 c
295.879 291.719 295.689 292.479 295.689 293.269 c
295.689 294.399 296.119 295.099 296.829 295.129 c
296.829 290.729 l
f
297.239 295.059 m
297.949 294.799 298.379 293.849 298.379 292.579 c
298.379 291.399 297.969 290.719 297.239 290.679 c
297.239 295.059 l
f
*U
*u
299.992 292.474 m
299.992 292.980 l
300.431 292.980 l
300.431 292.474 l
299.992 292.474 l
f
299.992 289.401 m
299.992 291.993 l
300.431 291.993 l
300.431 289.401 l
299.992 289.401 l
f
*U
*u
338.689 281.230 m
339.919 281.399 340.799 282.519 340.799 283.929 c
340.799 285.299 339.959 286.289 338.689 286.379 c
338.689 287.179 l
338.689 287.549 338.699 287.739 338.719 287.969 c
338.249 288.159 l
338.269 287.919 338.279 287.669 338.279 287.269 c
338.279 286.379 l
337.079 286.239 336.169 285.099 336.169 283.719 c
336.169 282.329 337.029 281.309 338.279 281.210 c
338.279 280.200 l
338.279 279.750 338.269 279.470 338.249 279.190 c
338.719 279.080 l
338.699 279.410 338.699 279.440 338.689 279.880 c
338.689 280.150 l
338.689 281.230 l
f
338.279 281.629 m
337.999 281.739 337.799 281.899 337.649 282.129 c
337.329 282.619 337.139 283.379 337.139 284.169 c
337.139 285.299 337.569 285.999 338.279 286.029 c
338.279 281.629 l
f
338.689 285.959 m
339.399 285.699 339.829 284.749 339.829 283.479 c
339.829 282.299 339.419 281.619 338.689 281.579 c
338.689 285.959 l
f
*U
*u
341.442 283.374 m
341.442 283.880 l
341.881 283.880 l
341.881 283.374 l
341.442 283.374 l
f
341.442 280.301 m
341.442 282.893 l
341.881 282.893 l
341.881 280.301 l
341.442 280.301 l
f
*U
343.473 280.879 m
343.473 281.860 l
342.499 281.860 l
342.499 282.271 l
343.473 282.271 l
343.473 283.245 l
343.888 283.245 l
343.888 282.271 l
344.862 282.271 l
344.862 281.860 l
343.888 281.860 l
343.888 280.879 l
343.473 280.879 l
f
347.003 280.301 m
346.564 280.301 l
346.564 283.101 l
346.456 282.998 346.317 282.898 346.146 282.798 c
345.975 282.695 345.822 282.620 345.685 282.571 c
345.685 282.996 l
345.929 283.110 346.144 283.250 346.329 283.416 c
346.512 283.579 346.642 283.738 346.720 283.894 c
347.003 283.894 l
347.003 280.301 l
f
0.00 1.00 0.00 (Green) 0 1 XX
0.500 w
[ 3.999 1 1 1 ] 0 d
0.74 0.00 1.00 (Violet) 0 1 Xx
263.250 262.500 m
300 287.250 l
S
0.00 0.00 1.00 (Blue) 0 1 XX
[ 2 2 ] 0 d
300 287.250 m
337.500 279 l
S
1.00 0.00 0.00 (Red) 0 1 XX
[ ] 0 d
308.450 256.850 m
305.450 267.350 l
S
1.00 0.00 0.00 (Red) 0 1 Xx
303.618 266.479 m
307.464 267.579 l
304.259 271.516 l
f
0.250 w
0.00 0.00 0.00 (Black) 0 1 Xx
*u
309.039 248.980 m
310.269 249.149 311.149 250.269 311.149 251.679 c
311.149 253.049 310.309 254.039 309.039 254.129 c
309.039 254.929 l
309.039 255.299 309.049 255.489 309.069 255.719 c
308.599 255.909 l
308.619 255.669 308.629 255.419 308.629 255.019 c
308.629 254.129 l
307.429 253.989 306.519 252.849 306.519 251.469 c
306.519 250.079 307.379 249.059 308.629 248.960 c
308.629 247.950 l
308.629 247.500 308.619 247.220 308.599 246.940 c
309.069 246.830 l
309.049 247.160 309.049 247.190 309.039 247.630 c
309.039 247.900 l
309.039 248.980 l
f
308.629 249.379 m
308.349 249.489 308.149 249.649 307.999 249.879 c
307.679 250.369 307.489 251.129 307.489 251.919 c
307.489 253.049 307.919 253.749 308.629 253.779 c
308.629 249.379 l
f
309.039 253.709 m
309.749 253.449 310.179 252.499 310.179 251.229 c
310.179 250.049 309.769 249.369 309.039 249.329 c
309.039 253.709 l
f
*U
*u
311.792 251.124 m
311.792 251.630 l
312.231 251.630 l
312.231 251.124 l
311.792 251.124 l
f
311.792 248.051 m
311.792 250.643 l
312.231 250.643 l
312.231 248.051 l
311.792 248.051 l
f
*U
312.495 247.057 m
312.495 247.374 l
315.407 247.374 l
315.407 247.057 l
312.495 247.057 l
f
317.373 249 m
317.805 248.944 l
317.756 248.646 317.637 248.412 317.441 248.243 c
317.246 248.075 317.009 247.992 316.726 247.992 c
316.370 247.992 316.084 248.107 315.869 248.339 c
315.654 248.570 315.547 248.902 315.547 249.337 c
315.547 249.615 315.593 249.862 315.686 250.072 c
315.779 250.282 315.918 250.438 316.108 250.543 c
316.299 250.648 316.504 250.702 316.728 250.702 c
317.009 250.702 317.239 250.629 317.419 250.487 c
317.597 250.345 317.712 250.143 317.764 249.881 c
317.336 249.816 l
317.295 249.989 317.222 250.121 317.119 250.209 c
317.016 250.296 316.892 250.340 316.745 250.340 c
316.523 250.340 316.343 250.260 316.206 250.101 c
316.067 249.943 315.998 249.691 315.998 249.349 c
315.998 249 316.064 248.746 316.199 248.590 c
316.330 248.431 316.506 248.353 316.721 248.353 c
316.892 248.353 317.036 248.404 317.153 248.512 c
317.268 248.617 317.341 248.780 317.373 249 c
f
318.516 253.673 m
318.291 255.011 l
318.291 256.208 l
319.292 256.208 l
319.292 255.011 l
319.057 253.673 l
318.516 253.673 l
f
0.00 1.00 0.00 (Green) 0 1 XX
0.500 w
0.74 0.00 1.00 (Violet) 0 1 Xx
268.300 290.550 m
279.550 279.300 l
S
0.00 1.00 0.00 (Green) 0 1 Xx
280.256 281.420 m
279.314 279.535 l
277.429 278.593 l
283.084 275.765 l
f
0.250 w
0.00 0.00 0.00 (Black) 0 1 Xx
*u
265.322 293.374 m
266.552 293.543 267.432 294.663 267.432 296.073 c
267.432 297.443 266.592 298.433 265.322 298.523 c
265.322 299.323 l
265.322 299.693 265.332 299.883 265.352 300.113 c
264.882 300.303 l
264.902 300.063 264.912 299.813 264.912 299.413 c
264.912 298.523 l
263.712 298.383 262.802 297.243 262.802 295.863 c
262.802 294.473 263.662 293.453 264.912 293.354 c
264.912 292.344 l
264.912 291.894 264.902 291.614 264.882 291.334 c
265.352 291.224 l
265.332 291.554 265.332 291.584 265.322 292.024 c
265.322 292.294 l
265.322 293.374 l
f
264.912 293.773 m
264.632 293.883 264.432 294.043 264.282 294.273 c
263.962 294.763 263.772 295.523 263.772 296.313 c
263.772 297.443 264.202 298.143 264.912 298.173 c
264.912 293.773 l
f
265.322 298.103 m
266.032 297.843 266.462 296.893 266.462 295.623 c
266.462 294.443 266.052 293.763 265.322 293.723 c
265.322 298.103 l
f
*U
*u
268.075 295.518 m
268.075 296.024 l
268.514 296.024 l
268.514 295.518 l
268.075 295.518 l
f
268.075 292.445 m
268.075 295.037 l
268.514 295.037 l
268.514 292.445 l
268.075 292.445 l
f
*U
268.778 291.451 m
268.778 291.768 l
271.690 291.768 l
271.690 291.451 l
268.778 291.451 l
f
*u
272.369 292.445 m
271.962 292.445 l
271.962 296.024 l
272.401 296.024 l
272.401 294.747 l
272.587 294.979 272.823 295.096 273.111 295.096 c
273.270 295.096 273.422 295.062 273.563 294.998 c
273.705 294.935 273.822 294.844 273.915 294.727 c
274.007 294.610 274.078 294.471 274.132 294.307 c
274.183 294.141 274.210 293.965 274.210 293.780 c
274.210 293.336 274.100 292.991 273.880 292.750 c
273.661 292.505 273.397 292.386 273.090 292.386 c
272.782 292.386 272.543 292.513 272.369 292.769 c
272.369 292.445 l
f
272.364 293.760 m
272.364 293.448 272.406 293.223 272.491 293.087 c
272.628 292.859 272.816 292.747 273.053 292.747 c
273.243 292.747 273.409 292.830 273.551 292.996 c
273.690 293.162 273.761 293.411 273.761 293.743 c
273.761 294.080 273.693 294.332 273.558 294.493 c
273.424 294.654 273.263 294.734 273.072 294.734 c
272.880 294.734 272.714 294.649 272.574 294.483 c
272.433 294.317 272.364 294.075 272.364 293.760 c
f
*U
275.080 298.067 m
274.855 299.405 l
274.855 300.602 l
275.856 300.602 l
275.856 299.405 l
275.621 298.067 l
275.080 298.067 l
f
0.00 0.00 1.00 (Blue) 0 1 XX
0.500 w
0.74 0.00 1.00 (Violet) 0 1 Xx
330.100 300.300 m
321.850 286.800 l
S
0.00 0.00 1.00 (Blue) 0 1 Xx
324.078 286.610 m
322.023 287.084 l
320.665 288.696 l
319.242 282.533 l
f
0.250 w
0.00 0.00 0.00 (Black) 0 1 Xx
*u
327.192 302.593 m
328.422 302.762 329.302 303.882 329.302 305.292 c
329.302 306.662 328.462 307.652 327.192 307.742 c
327.192 308.542 l
327.192 308.912 327.202 309.102 327.222 309.332 c
326.752 309.522 l
326.772 309.282 326.782 309.032 326.782 308.632 c
326.782 307.742 l
325.582 307.602 324.672 306.462 324.672 305.082 c
324.672 303.692 325.532 302.672 326.782 302.573 c
326.782 301.563 l
326.782 301.113 326.772 300.833 326.752 300.553 c
327.222 300.443 l
327.202 300.773 327.202 300.803 327.192 301.243 c
327.192 301.513 l
327.192 302.593 l
f
326.782 302.992 m
326.502 303.102 326.302 303.262 326.152 303.492 c
325.832 303.982 325.642 304.742 325.642 305.532 c
325.642 306.662 326.072 307.362 326.782 307.392 c
326.782 302.992 l
f
327.192 307.322 m
327.902 307.062 328.332 306.112 328.332 304.842 c
328.332 303.662 327.922 302.982 327.192 302.942 c
327.192 307.322 l
f
*U
*u
329.945 304.737 m
329.945 305.243 l
330.384 305.243 l
330.384 304.737 l
329.945 304.737 l
f
329.945 301.664 m
329.945 304.256 l
330.384 304.256 l
330.384 301.664 l
329.945 301.664 l
f
*U
330.648 300.670 m
330.648 300.987 l
333.560 300.987 l
333.560 300.670 l
330.648 300.670 l
f
333.939 301.664 m
333.939 303.914 l
333.551 303.914 l
333.551 304.256 l
333.939 304.256 l
333.939 304.532 l
333.939 304.705 333.954 304.835 333.985 304.920 c
334.027 305.033 334.100 305.125 334.208 305.196 c
334.315 305.267 334.464 305.303 334.657 305.303 c
334.779 305.303 334.916 305.289 335.067 305.260 c
335.001 304.876 l
334.908 304.891 334.823 304.901 334.742 304.901 c
334.608 304.901 334.513 304.871 334.459 304.815 c
334.403 304.757 334.376 304.652 334.376 304.495 c
334.376 304.256 l
334.881 304.256 l
334.881 303.914 l
334.376 303.914 l
334.376 301.664 l
333.939 301.664 l
f
335.558 307.286 m
335.333 308.624 l
335.333 309.821 l
336.334 309.821 l
336.334 308.624 l
336.099 307.286 l
335.558 307.286 l
f
*u
256.345 266.075 m
257.575 266.244 258.455 267.364 258.455 268.774 c
258.455 270.144 257.615 271.134 256.345 271.224 c
256.345 272.024 l
256.345 272.394 256.355 272.584 256.375 272.814 c
255.905 273.004 l
255.925 272.764 255.935 272.514 255.935 272.114 c
255.935 271.224 l
254.735 271.084 253.825 269.944 253.825 268.564 c
253.825 267.174 254.685 266.154 255.935 266.055 c
255.935 265.045 l
255.935 264.595 255.925 264.315 255.905 264.035 c
256.375 263.925 l
256.355 264.255 256.355 264.285 256.345 264.725 c
256.345 264.995 l
256.345 266.075 l
f
255.935 266.474 m
255.655 266.584 255.455 266.744 255.305 266.974 c
254.985 267.464 254.795 268.224 254.795 269.014 c
254.795 270.144 255.225 270.844 255.935 270.874 c
255.935 266.474 l
f
256.345 270.804 m
257.055 270.544 257.485 269.594 257.485 268.324 c
257.485 267.144 257.075 266.464 256.345 266.424 c
256.345 270.804 l
f
*U
*u
259.098 268.219 m
259.098 268.725 l
259.537 268.725 l
259.537 268.219 l
259.098 268.219 l
f
259.098 265.146 m
259.098 267.738 l
259.537 267.738 l
259.537 265.146 l
259.098 265.146 l
f
*U
260.035 266.220 m
260.035 266.662 l
261.385 266.662 l
261.385 266.220 l
260.035 266.220 l
f
263.404 265.146 m
262.965 265.146 l
262.965 267.946 l
262.857 267.843 262.718 267.743 262.547 267.643 c
262.376 267.540 262.223 267.465 262.086 267.416 c
262.086 267.841 l
262.330 267.955 262.545 268.095 262.730 268.261 c
262.913 268.424 263.043 268.583 263.121 268.739 c
263.404 268.739 l
263.404 265.146 l
f
264.987 270.768 m
264.762 272.106 l
264.762 273.303 l
265.763 273.303 l
265.763 272.106 l
265.528 270.768 l
264.987 270.768 l
f
end restore
%%PageTrailer
showpage
%%Trailer
%%EOF
